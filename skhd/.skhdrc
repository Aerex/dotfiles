# vim: foldmethod=marker
# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

#Applications {{{1
cmd - return : /Users/noamfo/.nix-profile/bin/alacritty

# Focus {{{1
cmd - h : yabai -m window --focus west
cmd - j : yabai -m window --focus south
cmd - k : yabai -m window --focus north
cmd - l : yabai -m window --focus east
# }}}
# Stack Focus {{{2
cmd + alt - j : yabai -m window --focus stack.next
cmd + alt - k : yabai -m window --focus stack.prev
# }}}
# Swap {{{1
cmd + alt - h : yabai -m window --swap west
cmd + alt - j : yabai -m window --swap south
cmd + alt - k : yabai -m window --swap north
cmd + alt - l : yabai -m window --swap east

# Sizes {{{1

# balance size of windows
# equalize size of windows
cmd + alt - 0 : yabai -m space --balance
## Increase {{{2
cmd - 0x1E  : yabai -m window --resize left:-20:0
cmd - 0x21  :  yabai -m window --resize right:20:0

### Decrease {{{2
cmd + shift - 0x1E : yabai -m window --resize bottom:0:-20
cmd + shift - 0x21 : yabai -m window --resize top:0:20

# Move {{{1
shift + cmd - h : yabai -m window --warp west
shift + cmd - j : yabai -m window --warp south
shift + cmd - k : yabai -m window --warp north
shift + cmd - l : yabai -m window --warp east
#}}}

# Programs {{{1
cmd - u : bash -c "/Users/noamfo/.bin/mac-scratchpad"
cmd + shift - z: bash -c "$HOME/bin/alacritty -t fzf-nova --dimensions 882 458 --position 384 244 -e $HOME/.config/fzf-nova/fzf-nova"
#}}}

# Rotate the window tree clock-wise (options: 90, 180, 270 degree)
alt - r : yabai -m space --rotate 90

# Sending Windows {{{1
#shift + cmd - x : yabai -m window --space $(yabai get _last_active_desktop)
shift + alt - z : yabai -m window --space prev
shift + alt - c : yabai -m window --space next
cmd + shift - 1 : yabai -m window --space 1
cmd + shift - 2 : yabai -m window --space 2
cmd + shift - 3 : yabai -m window --space 3
cmd + shift - 4 : yabai -m window --space 4
cmd + shift - 5 : yabai -m window --space 5
cmd + shift - 6 : yabai -m window --space 6
cmd + shift - 7 : yabai -m window --space 7
cmd + shift - 8 : yabai -m window --space 8

# Monitors {{{
# send window to monitor and follow focus
# WeWork
cmd + ctrl + shift  - x : yabai -m window --display 1; yabai -m display --focus 1 # screen
cmd + ctrl + shift  - c : yabai -m window --display 2; yabai -m display --focus 2 # middle monitor
cmd + ctrl + shift  - z : yabai -m window --display 3; yabai -m display --focus 3 # vertical_monitor
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1
#}}

#}}}


# Insertion {{{1
# set insertion point in focused container
ctrl + alt - h : yabai -m window --insert west
cmd + ctrl - left   : yabai -m window west --stack  $(yabai -m query --windows --window | jq -r 'id')
cmd + ctrl - down  : yabai -m window south --stack $(yabai -m query --windows --window | jq -r '.id')
cmd + ctrl - up    : yabai -m window north --stack $(yabai -m query --windows --window | jq -r '.id')
cmd + ctrl - right : yabai -m window east --stack $(yabai -m query --windows --window | jq -r '.id')

# Layouts {{{1
cmd + shift - b : yabai -m space --layout bsp
cmd + shift - m : yabai -m space --layout stack
cmd + shift - n : yabai -m space --layout float

# make floating window fill screen
 shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
 shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
 shift + cmd - n : yabai -m space --create && \
                   index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
                   yabai -m window --space "${index}" && \
                   yabai -m space --focus "${index}"
# shift + cmd - z : yabai -m window --space next; yabai -m space --focus next
#
# rotate tree
# shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2

# Monitor {{{2
#cmd + ctrl - x  : yabai -m display --focus prev
#cmd + ctrl - z  : yabai -m display --focus next
# WeWork
cmd + ctrl - x  : yabai -m display --focus 1 # screen
cmd + ctrl - c  : yabai -m display --focus 2 # middle monitor
cmd + ctrl - z  : yabai -m display --focus 3 # vertical_monitor
#shift + cmd + ctrl - n : 
#}}

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20


# toggle window zoom
 alt - d : yabai -m window --toggle zoom-parent
 alt - f : yabai -m window --toggle zoom-fullscreen

# toggle window split type
# alt - e : yabai -m window --toggle split

# float / unfloat window and center on screen
# alt - t : yabai -m window --toggle float;\
#           yabai -m window --grid 4:4:1:1:2:2

# toggle sticky(+float), topmost, picture-in-picture
 # alt - p : yabai -m window --toggle sticky;\
 #           yabai -m window --toggle topmost;\
 #           yabai -m window --toggle pip
# Reload {{{1
ctrl + alt + cmd - u : bash -c "osascript -e 'tell application \"'$(ps ax | grep sicht | awk '{print $5}' | head -1 | cut -d/ -f3 | cut -d. -f1)'\" to refresh'";\
  terminal-notifier -title Ubersitch -message "Reloading widgets"
ctrl + alt + cmd - s : skhd -r; terminal-notifier -title Skhd -message "Reloading keybinding"
ctrl + alt + cmd -c : sudo killall VDCAssistant; terminal-notifier -title Camera -message "Restart Camera"
