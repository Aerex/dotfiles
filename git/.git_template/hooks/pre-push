#!/bin/bash

  # Called by "git push" after it has checked the remote status,
  # but before anything has been pushed.
  #
  # If this script exits with a non-zero status nothing will be pushed.
  #
  # Steps to install, from the root directory of your repo...
  # 1. Copy the file into your repo at `.git/hooks/pre-push`
  # 2. Set executable permissions, run `chmod +x .git/hooks/pre-push`
  # 3. Or, use `rake hooks:pre_push` to install
  #
  # Try a force push to master, you should get a message `*** [Policy] never force push...`
  #
  # The commands below will not be allowed...
  # `git push --force origin master`
  # `git push --delete origin master`
  # `git push origin :master`
  #
  # Nor will a force push while on the master branch be allowed...
  # `git co master`
  # `git push --force origin`
  # 
  # You can override by setting the environment variable OVERRIDE_MASTER_PUSH
  # Note that this will still ask if you still want to do this. Enter y or Y to continue command
  # Message will occur if you try to do a force or delete a branch
  # 
  # Also, script alerts you if you have console.log statements in your code  
  # Requires git 1.8.2 or newer
  #
  # Git 1.8.2 release notes cover the new pre-push hook:
  # <https://github.com/git/git/blob/master/Documentation/RelNotes/1.8.2.txt>
  #
  # See Sample pre-push script:
  # <https://github.com/git/git/blob/87c86dd14abe8db7d00b0df5661ef8cf147a72a3/templates/hooks--pre-push.sample>

do_exit(){
    if [[ $current_branch == 'master' ]]; then
      echo $policy
      if [ -z ${OVERRIDE_MASTER_PUSH+x} ]; then
        exit 1
      fi
    fi
    echo
    read -p "You're about to push to $current_branch with the following command: $push_command, is that what you intended? [y|n] " -n 1 -r < /dev/tty
    echo
      if echo $REPLY | grep -E '^[Yy]$' 
      then
          exit 0 # push will execute
      fi
    exit 1
}

stopMasterPushes(){


  protected_branch='master'

  policy='[Policy] Never force push or delete the '$protected_branch' branch! (Prevented with pre-push hook.)'

  current_branch=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')

  push_command=$(ps -ocommand= -p $PPID)
  echo "Current command  is $push_command"

  is_destructive='force|delete|\-f'

  will_remove_protected_branch=':'$protected_branch


  if [[ $push_command =~ $is_destructive ]] && [ $current_branch = $protected_branch ]; then
    do_exit
  fi

  if [[ $push_command =~ $is_destructive ]] && [[ $push_command =~ $protected_branch ]]; then
    do_exit
  fi

  if [[ $push_command =~ $will_remove_protected_branch ]]; then
    do_exit
  fi

  if [[ $push_command =~ $is_destructive ]]; then
    do_exit
  fi
  unset do_exit

  #exit 0
  #!/bin/bash

  #protected_branch='master'
  #current_branch=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')
  #
  #if [ $protected_branch = $current_branch ]
  #then
  #    read -p "You're about to push master, is that what you intended? [y|n] " -n 1 -r < /dev/tty
  #    echo
  #    if echo $REPLY | grep -E '^[Yy]$' > /dev/null
  #    then
  #        exit 0 # push will execute
  #    fi
  #    exit 1 # push will not execute
  #else
  #    exit 0 # push will execute
  #fi
}

removeConsoleLogStatementsUsingAg(){  

  current_branch=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')
  resultsFromAg=$(ag --js --ignore-dir "node_modules" --ignore "coverage.html" "console.log" ./ )

  if [ ! -z "$resultsFromAg" ]; then
    echo $resultsFromAg
    echo 

    read -p "You're about to push to \"$current_branch\" with the log statements above, is this what you intended? [y|n] " -n 1 -r < /dev/tty
    echo 
    doNotWantToPush=$(echo $REPLY | grep -E '^[nN]$')
    affirmPush=$(echo $REPLY | grep -E '^[yY]$')

    while [[ -z $doNotWantToPush ]] && [[ -z $affirmPush ]]; do 
      read -p "$REPLY is not valid. Choose either [y|n] " -n 1 -r < /dev/tty
      echo
      doNotWantToPush=$(echo $REPLY | grep -E '^[nN]$')
      affirmPush=$(echo $REPLY | grep -E '^[yY]$')
    done

    if [[ $doNotWantToPush ]] && [[ -z $affirmPush ]]; then
        exit 1 # push will execute
    fi
    exit 0 # push will not execute
  fi
}

stopMasterPushes
# Check if ag exist if so use that 
ag_command_exists=$(command -v $(which ag) 2>/dev/null)
if [ ! -z ${ag_command_exists+x} ]; then
  removeConsoleLogStatementsUsingAg
fi


