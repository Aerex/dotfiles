" __     _____ _____ __  __ 
" \ \   / /_ _|  ___|  \/  |
"  \ \ / / | || |_  | |\/| |
"   \ V /  | ||  _| | |  | |
"    \_/  |___|_|   |_|  |_|
"                           
" Sample configuration file for vifm (last updated: 20 July, 2018)
" You can edit this file by hand.
" The " character at the beginning of a line comments out the line.
" Blank lines are ignored.
" The basic format for each item is shown with an example.

" General ------------------------------------------------------------------------------ {{{1
"

" This is the actual command used to start vi.  The default is vim.
" If you would like to use another vi clone such as Elvis or Vile
" you will need to change this setting.


set dotfiles
set vicmd=nvim

" This makes vifm perform file operations on its own instead of relying on
" standard utilities like `cp`.  While using `cp` and alike is a more universal
" solution, it's also much slower when processing large amounts of files and
" doesn't support progress measuring.

set syscalls

" Trash Directory
" The default is to move files that are deleted with dd or :d to
" the trash directory.  If you change this you will not be able to move
" files by deleting them and then using p to put the file in the new location.
" I recommend not changing this until you are familiar with vifm.
" This probably shouldn't be an option.

set trash
set trashdir=~/.local/Trash

" This is how many directories to store in the directory history.

set history=100

" Automatically resolve symbolic links on l or Enter.

set nofollowlinks

" With this option turned on you can run partially entered commands with
" unambiguous beginning using :! (e.g. :!Te instead of :!Terminal or :!Te<tab>).

" set fastrun

" Natural sort of (version) numbers within text.

set sortnumbers

" Maximum number of changes that can be undone.

set undolevels=100

set vimhelp

" If you would like to run an executable file when you
" press return on the file name set this.

set norunexec

" Use KiB, MiB, ... instead of KB, MB, ...

set iec

" Selected color scheme

colorscheme solarized-dark

" Format for displaying time in file list. For example:
" TIME_STAMP_FORMAT=%m/%d-%H:%M
" See man date or man strftime for details.

set timefmt=%m/%d\ %H:%M

" Show list of matches on tab completion in command-line mode

set wildmenu

" Display completions in a form of popup with descriptions of the matches

set wildstyle=popup

" Display suggestions in normal, visual and view modes for keys, marks and
" registers (at most 5 files).  In other view, when available.

set suggestoptions=normal,visual,view,otherpane,keys,marks,registers

" Ignore case in search patterns unless it contains at least one uppercase
" letter

set ignorecase
set smartcase

" Don't highlight search results automatically

set nohlsearch

" Use increment searching (search while typing)
set incsearch

" Try to leave some space from cursor to upper/lower border in lists

set scrolloff=0

" Don't do too many requests to slow file systems

if !has('win')
    set slowfs=curlftpfs
endif

" Set custom status line look

"set statusline="  Hint: %z%= %A %10u:%-7g %15s %20d  "
set statusline="%A %u %g %15s %20d  %="

"Controls what will be saved in the $VIFM/vifminfo file.
"default: bookmarks,bmarks"
set vifminfo="bookmarks,bmarks"

set number

"Print relative line number in front of each file name when 'lsview' option is turned off. Use 'numberwidth' to control width of line number. Various combinations of 'number' and 'relativenumber' lead to such results:
"default: false
set relativenumber

let &statusline  = "%2* %4*%1*"  " initial separator and first segment colour
let &statusline .= " %-16t "     	" file name
let &statusline .= "%7*%2*"     	" left separator
let &statusline .= "%3*%2*"     	" left dark separator
let &statusline .= "%="          	" fill the whole status line
let &statusline .= "%3*%2*"     	" right dark separator
let &statusline .= "%7*%5*"     	" right separator
let &statusline .= "  %A "      	" file attributes
let &statusline .= "%4*%6*"     	 " right separator
let &statusline .= " %7u:%-7g  "	" user and group owners of the file
let &statusline .= "%3*%2*" 	    	" right separator
let &statusline .= "  %-5s "      	" human readable file size
let &statusline .= "%3*%2*"     	" right dark separator
let &statusline .= "%7*%5*"     	" right separator

" Marks
" ------------------------------------------------------------------------------ }}}

" :mark mark /full/directory/path [filename]
mark b ~/bin/
mark T ~/Trash
mark d ~/Documents
mark c ~/.config
mark h ~/
mark t /tmp
mark S ~/Documents/Scans
mark c ~/.config
mark z ~/.config/zsh
mark . ~/dotfiles
mark l ~/Downloads

" Commands ------------------------------------------------------------------------------ {{{1
" :com[mand][!] command_name action
" The following macros can be used in a command
" %a is replaced with the user arguments.
" %c the current file under the cursor.
" %C the current file under the cursor in the other directory.
" %f the current selected file, or files.
" %F the current selected file, or files in the other directory.
" %b same as %f %F.
" %d the current directory name.
" %D the other window directory name.
" %m run the command in a menu window

command! df df -h %m 2> /dev/null
command! nvim :nvim
command! diff vim -d %f %F
command! zip zip -r %f.zip %f
command! run !! ./%f
command! make !!make %a
command! mkcd :mkdir %a | cd %a
command! vgrep vim "+grep %a"
command! reload :write | restart
command! extract :atool -x %f
command! wget :wget
command! FZFfind :set noquickview | :execute 'goto "'.system('find | fzf --height 20 2>/dev/tty ').'"%IU' | redraw
if $TERM 
  command! FZFlocate	:set noquickview |
    \ :execute 'goto "'.system('locate $HOME | fzf-tmux --header=locate\ in\ \$HOME  2>/dev/tty ').'"%IU' |
    \ redraw
else 
  command! FZFlocate :set noquickview | :execute 'goto "'.system('mlocate $HOME | fzf --height 20 2>/dev/tty ').'"%IU' | redraw
endif

" File Types ------------------------------------------------------------------------------ {{{1

" The file type is for the default programs to be used with
" a file extension.
" :filetype pattern1,pattern2 defaultprogram,program2
" :fileviewer pattern1,pattern2 consoleviewer
" The other programs for the file type can be accessed with the :file command
" The command macros %f, %F, %d, %F may be used in the commands.
" The %a macro is ignored.  To use a % you must put %%.

" For automated FUSE mounts, you must register an extension with :file[x]type
" in one of following formats:
"
" :filetype extensions FUSE_MOUNT|some_mount_command using %SOURCE_FILE and %DESTINATION_DIR variables
" %SOURCE_FILE and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.zip,*.jar,*.war,*.ear FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR
"
" :filetype extensions FUSE_MOUNT2|some_mount_command using %PARAM and %DESTINATION_DIR variables
" %PARAM and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.ssh FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR
" %PARAM value is filled from the first line of file (whole line).
" Example first line for SshMount filetype: root@127.0.0.1:/
"
" You can also add %CLEAR if you want to clear screen before running FUSE
" program.

" Pdf {{{2
fileviewer *.pdf
  \ vifmimg pdf %px %py %pw %ph %c
  \ %pc
  \ vifmimg clear
filextype *.pdf zathura %c %i &, apvlv %c, xpdf %c
"}}}
    
" Djvu {{{2
fileviewer *.djvu
  \ vifmimg djvu %px %py %pw %ph %c
  \ %pc
  \ vifmimg clear
filextype *.djvu
  \ {View in zathura}
  \ zathura %f,
  \ {View in apvlv}
  \ apvlv %f
"}}}

" Images {{{2
filextype *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm
  \ {View in feh}
  \ feh %f,
fileviewer <image/*>
  \ vifmimg draw %px %py %pw %ph %c
  \ %pc
  \ vifmimg clear
"}}}

" Video {{{2 
filextype *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
         \*.fl[icv],*.m2v,*.mov,*.webm,*.mts,*.m4v,*.r[am],*.qt,*.divx,
         \*.as[fx]
        \ {View using ffplay}
        \ ffplay -fs -autoexit %f,
        \ {View using Dragon}
        \ dragon %f:p,
        \ {View using mplayer}
        \ mplayer %f,
fileviewer <video/*>
    \ vifmimg video %px %py %pw %ph %c
    \ %pc
    \ vifmimg clear
"}}}

fileviewer *.epub
  \ vifmimg epub %px %py %pw %ph %c
  \ %pc
  \ vifmimg clear
" Audio {{{2
fileviewer <audio/*>
    \ vifmimg audio %px %py %pw %ph %c
    \ %pc
    \ vifmimg clear
filetype *.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus
       \ {Play using ffplay}
       \ ffplay -nodisp -autoexit %c,
       \ {Play using MPlayer}
       \ mplayer %f,
"}}}

fileviewer <font/*>
    \ vifmimg font %px %py %pw %ph %c
    \ %pc
    \ vifmimg clear

" PostScript
filextype *.ps,*.eps,*.ps.gz
        \ {View in zathura}
        \ zathura %f,
        \ {View in gv}
        \ gv %c %i &,


" Web
filextype *.html,*.htm
        \ {Open with dwb}
        \ dwb %f %i &,
        \ {Open with firefox}
        \ firefox %f &,
        \ {Open with uzbl}
        \ uzbl-browser %f %i &,
filetype *.html,*.htm links, lynx

" Object
filetype *.o nm %f | less

" Man page
filetype *.[1-8] man ./%c
fileviewer *.[1-8] man ./%c | col -b

" Images

fileviewer *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm
         \ convert -identify %f -verbose /dev/null

" OpenRaster
filextype *.ora
        \ {Edit in MyPaint}
        \ mypaint %f,

" Mindmap
filextype *.vym
        \ {Open with VYM}
        \ vym %f &,

" MD5
filetype *.md5
       \ {Check MD5 hash sum}
       \ md5sum -c %f %S,

" SHA1
filetype *.sha1
       \ {Check SHA1 hash sum}
       \ sha1sum -c %f %S,

" SHA256
filetype *.sha256
       \ {Check SHA256 hash sum}
       \ sha256sum -c %f %S,

" SHA512
filetype *.sha512
       \ {Check SHA512 hash sum}
       \ sha512sum -c %f %S,

" GPG signature
filetype *.asc
       \ {Check signature}
       \ !!gpg --verify %c,

" Torrent
filetype *.torrent ktorrent %f &
fileviewer *.torrent dumptorrent -v %c

" FuseZipMount
filetype *.zip,*.jar,*.war,*.ear,*.oxt,*.apkg
       \ {Mount with fuse-zip}
       \ FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR,
       \ {View contents}
       \ zip -sf %c | less,
       \ {Extract here}
       \ tar -xf %c,
fileviewer *.zip,*.jar,*.war,*.ear,*.oxt zip -sf %c

" ArchiveMount
filetype *.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.txz
       \ {Mount with archivemount}
       \ FUSE_MOUNT|archivemount %SOURCE_FILE %DESTINATION_DIR,
fileviewer *.tgz,*.tar.gz tar -tzf %c
fileviewer *.tar.bz2,*.tbz2 tar -tjf %c
fileviewer *.tar.txz,*.txz xz --list %c
fileviewer *.tar tar -tf %c

" Rar2FsMount and rar archives
filetype *.rar
       \ {Mount with rar2fs}
       \ FUSE_MOUNT|rar2fs %SOURCE_FILE %DESTINATION_DIR,
fileviewer *.rar unrar v %c

" IsoMount
filetype *.iso
       \ {Mount with fuseiso}
       \ FUSE_MOUNT|fuseiso %SOURCE_FILE %DESTINATION_DIR,

" SshMount
filetype *.ssh
       \ {Mount with sshfs}
       \ FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR %FOREGROUND,

" FtpMount
filetype *.ftp
       \ {Mount with curlftpfs}
       \ FUSE_MOUNT2|curlftpfs -o ftp_port=-,,disable_eprt %PARAM %DESTINATION_DIR %FOREGROUND,

" Fuse7z and 7z archives
filetype *.7z
       \ {Mount with fuse-7z}
       \ FUSE_MOUNT|fuse-7z %SOURCE_FILE %DESTINATION_DIR,
fileviewer *.7z 7z l %c

" Office files
filextype *.odt,*.doc,*.docx,*.xls,*.xlsx,*.odp,*.pptx libreoffice %f &
fileviewer *.doc catdoc %c
fileviewer *.docx docx2txt.pl %f -

" TuDu files
filetype *.tudu tudu -f %c

" Qt projects
filextype *.pro qtcreator %f &

" Markdown files
fileviewer *.md glow %f

" Directories
filextype */
        \ {View in thunar}
        \ Thunar %f &,

" Syntax highlighting in preview
"
" Explicitly set highlight type for some extensions
"
" 256-color terminal
" fileviewer *.[ch],*.[ch]pp highlight -O xterm256 -s dante --syntax c %c
" fileviewer Makefile,Makefile.* highlight -O xterm256 -s dante --syntax make %c
"
" 16-color terminal
" fileviewer *.c,*.h highlight -O ansi -s dante %c
"
" Or leave it for automatic detection
"
" fileviewer *[^/] pygmentize -O style=monokai -f console256 -g

" Displaying pictures in terminal
"
" fileviewer *.jpg,*.png shellpic %c

" Open all other files with default system programs (you can also remove all
" :file[x]type commands above to ensure they don't interfere with system-wide
" settings).  By default all unknown files are opened with 'vi[x]cmd'
" uncommenting one of lines below will result in ignoring 'vi[x]cmd' option
" for unknown file types.
" For *nix:
" filetype * xdg-open
" For OS X:
" filetype * open
" For Windows:
" filetype * start, explorer

" ------------------------------------------------------------------------------

" What should be saved automatically between vifm runs
" Like in previous versions of vifm
" set vifminfo=options,filetypes,commands,bookmarks,dhistory,state,cs
" Like in vi
set vifminfo=dhistory,savedirs,chistory,state,tui,shistory,
    \phistory,fhistory,dirstack,registers,bookmarks,bmarks

" ------------------------------------------------------------------------------

" Examples of configuring both panels

" Customize view columns a bit (enable ellipsis for truncated file names)
"
" set viewcolumns=-{name}..,6{}.

" Filter-out build and temporary files
"
" filter! /^.*\.(lo|o|d|class|py[co])$|.*~$/
let &statusline .= "  %d %4*%2* "        	" file modification date and time

" ------------------------------------------------------------------------------ }}}
" Mappings ------------------------------------------------------------------------------ {{{1

map <insert>  :!touch<space>
map <space>mv :set millerview<cr>
map <space>dl :!wget $(xsel --clipboard -o)<cr>
map <space>vs :vs<cr>
map <space>v  :!nvim<space>
map <space>n  :touch<space>
map f /
map mkd       :mkdir<space>
map vs        :vsplit<cr>
map sp        :split<cr>
nmap J        <tab>
nmap [t       :tabprevious<cr>
nmap ]t       :tabnext<cr>
nmap K        <tab>

" GOTO ------------------------------------------------------------------------------ {{{2
map <silent> gC   :cd ~/.config<cr>
map <silent> gch  :cd ~/.cheat<cr>
map <silent> g.   :cd ~/dotfiles2<cr>
map <silent> gh   :cd ~<cr>
map <silent> gno  :cd ~/Documents/repos/.private/notes<cr>
map <silent> gnv  :cd ~/.config/nvim/<cr>
map <silent> gml  :cd ~/.Mail<cr>
map <silent> gca  :cd ~/.cache<cr>
map <silent> gq   :cd ~/.config/qutebrowser<cr>
map <silent> gz   :cd ~/.config/zsh<cr>
map <silent> gS   :cd ~/Documents/Scans<cr>
map <silent> gJ   :cd ~/Documents/Japanese<cr>
map <silent> gdl  :cd ~/Downloads<cr>
map <silent> gdo  :cd ~/Documents<cr>
map <silent> gtw  :cd ~/.task<cr>
map <silent> gpac :cd ~/.local/share/nvim/site/pack/packer<cr>
map <silent> gpi  :cd ~/Pictures<cr>
map cd            :cd <space>

" Switch between file previewers
nnoremap <silent> <c-p> <c-w><c-w>A<c-w><c-w>
nnoremap <silent> <c-n> <c-w><c-w>a<c-w><c-w>

map X :extract<cr>

vnoremap rn :rename<cr>
nnoremap q :q!<cr>

" Start shell in current directory
nnoremap <space>s :shell<cr>

" Display sorting dialog
nnoremap o :sort<cr>
noremap O :sort!<cr>

" Toggle visibility of preview window
nnoremap w :view<cr>
vnoremap w :view<cr>


" Open file in the background using its default program
nnoremap gb :file &<cr>l

" Maps for cut
"nnoremap dd yy
"nnoremap d y
"vnoremap d y
nnoremap D  :!echo Moving %f to Trash && trash-put %f<cr>
"vnoremap D                                                                               :!trash-put %f<cr>
"nnoremap p                                                                               :put &<cr>
"nnoremap P                                                                               :put! &<cr>

" Yank current directory path into the clipboard
nnoremap yd :!echo -n %d | xsel --input --clipboard<cr>

" Yank current file path into the clipboard
nnoremap yf :!echo -n %c | xsel --input --clipboard<cr>

" Mappings for faster renaming
nnoremap I cw<c-a>
nnoremap S cw<c-u>
nnoremap A cw
noremap cW cw
noremap cw cW

nnoremap !                                                                                :!

nnoremap ;                                                                                :

" Open editor to edit vifmrc and apply settings after returning to vifm
map <space>ce                                                                             :write | edit $MYVIFMRC | restart<cr>
nnoremap ,c                                                                               :write | edit $MYVIFMRC | restart<cr>
nnoremap ,l                                                                               :write | edit ~/.config/vifm/colors/solarized-dark.vifm | restart <cr>
nnoremap ,n                                                                               :!touch<space>
nnoremap ,v                                                                               :write | edit ~/.config/nvim/init.vim<cr>

" Toggle wrap setting on ,w key
nnoremap ,w                                                                               :set wrap!<cr>

" Example of standard two-panel file managers mappings
nnoremap <f3>                                                                             :!less %f<cr>
nnoremap <f4>                                                                             :edit<cr>
nnoremap <f5>                                                                             :copy<cr>
nnoremap <f6>                                                                             :move<cr>
nnoremap <f8>                                                                             :delete<cr>

" ------------------------------------------------------------------------------
set grepprg='rg --line-number %i %a %s'

noremap <silent> //    :FZFlocate<Cr>
noremap <silent> <c-f> :FZFfind<Cr>

" Source local config if one exists
if filereadable($HOME.'/.config/vifm/local.vim')
  source ~/.config/vifm/local.vim
endif

" Add additional place to look for executables
"
" let $PATH = $HOME.'/bin/fuse:'.$PATH

" Block particular shortcut
"
" nnoremap <left> <nop>

" Export IPC name of current instance as environment variable and use it to
" communicate with the instance later.
"
" It can be used in some shell script that gets run from inside vifm, for
" example, like this:
"     vifm --server-name "$VIFM_SERVER_NAME" --remote +"cd '$PWD'"
"
" let $VIFM_SERVER_NAME = v:servername
" vim: filetype=vifm foldmethod=marker
