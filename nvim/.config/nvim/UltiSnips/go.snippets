snippet cfrune  "Cobra RunE function"
func(cmd *cobra.Command, args []string) {
	$0
}
endsnippet

# Gomega {{{
snippet gde "Add gomega Describe function block"
Describe("$1", func() {
	$0
})
endsnippet

snippet git "Add gomega It function block"
It("$1", func() {
	$0
})
endsnippet

snippet "\b(gct)|(ctx)|(context)\b" "Add gomega Context function block" r
Context("$1", func() {
	$0
})
endsnippet

snippet gbe "Add gomega BeforeEach function block"
BeforeEach(func() {
	$0
})
endsnippet

snippet gbf "Add gomega Before function block"
Before(func() {
	$0
})
endsnippet

snippet gae "Add gomega AfterEach function block"
AfterEach(func() {
	$0
})
endsnippet

snippet aftereach "Add gomega AfterEach function block"
AfterEach(func() {
	$0
})
endsnippet

snippet gt "Add gomega It function block"
It("$1", func() {
	$0
})
endsnippet

snippet exp "Add gomega Expect() function block"
Expect($1)
endsnippet

snippet sn "Add gomega ShouldNot() function block"
ShouldNot($1)
endsnippet

snippet hav "Add gomega HaveOccured() function block"
HaveOccured()
endsnippet

snippet eq "Add gomega Equal() function block"
Equal($1)
endsnippet
#}}}

snippet sprint "Add fmt.Sprintf"
fmt.Sprintf("$1", $2)
endsnippet

snippet todo "Add TODO block"
// TODO: $1 $0
endsnippet

snippet note "Add note block"
// NOTE: $1 $0
endsnippet

snippet log "Print variable"
// REMOVEME: Do not commit
fmt.Printf("\n$1: %s\n", $1)
endsnippet

snippet logs "Print struct"
// REMOVEME: Do not commit
fmt.Printf("\n$1: %+v\n", $1)
endsnippet

snippet logn "Log number"
// REMOVEME: Do not commit
fmt.Println("\n`!v line('.')`")
endsnippet

snippet fixme "Add FIXME block"
// FIXME: $1 $0
endsnippet

snippet removeme "Add REMOVEME block"
// REMOVEME: $1 $0
endsnippet

snippet haveoc "Add gomega HaveOccured block"
HaveOccured()
endsnippet

snippet exne "Add Expect(..).ShouldNot(HaveOccurred) gomega block"
Expect($1).ShouldNot(HaveOccurred())
endsnippet

snippet exer "Add Expect(..).Should(HaveOccurred) gomega block"
Expect($1).Should(HaveOccurred())
endsnippet

# vim: fdm=marker

#global p!
#def insert_interface():
# line = snip.line
# buf = snip.buf[line+1]

# 
#
#endglobal
#snippet countf "Add counterfeiter block to interface"
#//go:generate counterfiter . `!p snip.rv = insert_interface()`
#endsnippet
