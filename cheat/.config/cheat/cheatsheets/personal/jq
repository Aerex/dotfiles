# To pretty print the json:
jq "." < filename.json

# To access the value at key "foo":
jq '.foo'

# To access first list item:
jq '.[0]'

# to slice and dice:
jq '.[2:4]'
jq '.[:3]'
jq '.[-2:]'

# Iterate json with bash 4+ and jq
while IFS= read -r config; do
    apws dynamodb put-item --table-name "xxx" --item "$config"
done< <(jq -c '.[]' < app-cnfg.json)

## Consider the example 
```
{
    "timestamp": 1234567890,
    "report": "Age Report",
    "results": [
        { "name": "John", "age": 43, "city": "TownA" },
        { "name": "Joe",  "age": 10, "city": "TownB" }
    ]
}
```
# To extract top level attributes “timestamp” and “report”
jq '. | {timestamp,report}'

# To extract name and age of each “results” item
jq '.results[] | {name, age}'

# To extract name and age as text values instead of JSON
jq -r '.results[] | {name, age} | join(" ")'

# Filter this by attribute
jq '.results[] | select(.name == "John") | {age}'          # Get age for 'John'
jq '.results[] | select((.name == "Joe") and (.age = 10))' # Get complete records for all 'Joe' aged 10
jq '.results[] | select(.name | contains("Jo"))'           # Get complete records for all names with 'Jo'
jq '.results[] | select(.name | test("Joe\s+Smith"))'      # Get complete records for all names matching PCRE regex 'Joe\+Smith'

# Read keys with hypens
#curl -sSL "https://metadata.ryanparman.com/microformats2/?url=https://ryanparman.com" \
#    | jq '.rels | to_entries | .[] | select(.key == "structured-data") | .value'

# Select objects with at least one widget and at least one user
$ cat part-r-00000 | jq 'select((.widgets | length) > 0 and (.users | length) > 0)'

# Check if there are objects in an array
$ if [[ $(jq 'if type =="array" and length > 0 then true else false end' file.json) == "true" ]]; then
$   echo "file has elements in array"
$ fi

# Check a property is defined before accessing
jq '.result 
  | select(.property_history != null) 
  | .property_history 
  | map(select(.event_name == "Sold"))[0].date'
