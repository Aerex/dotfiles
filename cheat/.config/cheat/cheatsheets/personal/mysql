# CONNECTION {{{1
# To connect to a database
  mysql -h localhost -u root -p
#}}}

# DATABASE {{{1
# To backup all databases
  mysqldump --all-databases --all-routines -u root -p > ~/fulldump.sql

# To restore all databases
    mysql -u root -p  < ~/fulldump.sql
# To create a database in utf8 charset
    CREATE DATABASE owa CHARACTER SET utf8 COLLATE utf8_general_ci;
# To add a user and give rights on the given database
  GRANT ALL PRIVILEGES ON database.* TO 'user'@'localhost'IDENTIFIED BY 'password' WITH GRANT OPTION;
#}}}


# Peform date arithmetic on a column
DATE_SUB(<date>, interval <unit> <DAY/MONTH/YEAR>)

# To list the privileges granted to the account that you are using to connect to the server. Any of the 3 statements will work.
  SHOW GRANTS FOR CURRENT_USER();
  SHOW GRANTS;
  SHOW GRANTS FOR CURRENT_USER;

# Basic SELECT Statement
  SELECT * FROM tbl_name;

# Basic INSERT Statement
  INSERT INTO tbl_name (col1,col2) VALUES(15,col1*2);

# Basic UPDATE Statement
  UPDATE tbl_name SET col1 = "example";

# Basic DELETE Statement
  DELETE FROM tbl_name WHERE user = 'jcole';

# To check stored procedure
  SHOW PROCEDURE STATUS;

# To check stored function
  SHOW FUNCTION STATUS;

# Add Column
  ALTER TABLE tbl_name ADD column_name data_type
# Add Column AFTER col2
  ALTER TABLE tbl_name ADD column_name data_type AFTER col1
# Add Column BEFORE col2
  ALTER TABLE tbl_name ADD column_name data_type BEFORE col1

# Drop Column
  ALTER TABLE tbl_name DROP COLUMN column_name

# Modify Column
  ALTER TABLE table_name MODIFY COLUMN column_name datatype;

# Create index
  CREATE INDEX index_name ON table_name (column1, column2, ...);
# Add a unique index to a table
  ALTER TABLE table_name ADD CONSTRAINT constraint_name UNIQUE KEY(column_1,column_2,...);

# Drop constraint

# Add column to index
  ALTER TABLE table_name ADD INDEX index_name (column_name);

# Drop an index
  DROP INDEX index_name ON tbl_name.

# Create a foreign key
  ALTER TABLE table_name_ref ADD CONSTRAINT FK_<foreign_key_name> FOREIGN KEY (<foreign_key>) REFERENCES table_name_2(column);
# To create a FOREIGN KEY constraint on the "PersonID" column when the "Orders" table is already created, use the following SQL:
  ALTER TABLE Orders ADD CONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);

# TABLE {{{1
# Create table
  CREATE TABLE 'Table Name' ( Column_Name1 Data_Type(Size) [NULL | NOT NULL], Column_Name2 Data_Type(Size) [NULL | NOT NULL], â€¦ Column_NameN Data_Type(Size) [NULL | NOT NULL]);
# }}}

# Truncate (clear) table
  TRUNCATE TABLE table_name

# To ensure that you don't have duplicate entries you can use MAX(column) on a subquery
  LEFT JOIN (
      SELECT product_id, MAX(id) custom_domain_property_id, `value` AS default_custom_domain
      FROM product_properties
      WHERE `key` = 'default_custom_domain'
      GROUP BY product_id
      ) custom_domain_product_property ON custom_domain_product_property.product_id = products.id

# Joining with subqueries
  SELECT y.CategoryID,
  y.CategoryName,
  ROUND(x.actual_unit_price, 2) AS "Actual Avg Unit Price",
  ROUND(y.planned_unit_price, 2) AS "Would-Like Avg Unit Price"
  FROM
  (
   SELECT AVG(a.UnitPrice) AS actual_unit_price, c.CategoryID
   FROM order_details AS a
   INNER JOIN products AS b on b.ProductID = a.ProductID
   INNER JOIN categories AS c on b.CategoryID = c.CategoryID
   GROUP BY c.CategoryID
  ) AS x
  INNER JOIN
  (
   SELECT a.CategoryID, b.CategoryName, AVG(a.UnitPrice) AS planned_unit_price
   FROM products AS a
   INNER JOIN categories AS b ON b.CategoryID = a.CategoryID
   GROUP BY a.CategoryID
  ) AS y ON x.CategoryID = y.CategoryID

# vim: nowrap foldmethod=marker foldlevel=1
