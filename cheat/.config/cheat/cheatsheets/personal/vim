# Prefix	Meaning
g:varname	The variable is global
s:varname	The variable is local to the current script file
w:varname	The variable is local to the current editor window
t:varname	The variable is local to the current editor tab
b:varname	The variable is local to the current editor buffer
l:varname	The variable is local to the current function
a:varname	The variable is a parameter of the current function
v:varname	The variable is one that Vim predefines

&varname	A Vim option (local option if defined, otherwise global)
&l:varname	A local Vim option
&g:varname	A global Vim option
@varname	A Vim register
$varname	An environment variable

# File management

:e              reload file
:q              quit
:q!             quit without saving changes
:w              write file
:w {file}       write new file
:x              write file and exit

# Movement

    k
  h   l         basic motion
    j

w               next start of word
W               next start of whitespace-delimited word
e               next end of word
E               next end of whitespace-delimited word
b               previous start of word
B               previous start of whitespace-delimited word
0               start of line
$               end of line
gg              go to first line in file
G               go to end of file
gk				move down one displayed line
gj				move up one displayed line
f 				move toward the next occurance of a character to the right
F 				move toward the next occurance of a character to the left
				

# Insertion
#   To exit from insert mode use Esc or Ctrl-C
#   Enter insertion mode and:

a               append after the cursor
A               append at the end of the line
i               insert before the cursor
I               insert at the beginning of the line
o               create a new line under the cursor
O               create a new line above the cursor
R               enter insert mode but replace instead of inserting chars
:r {file}       insert from file

# Deletion

dt{char}		delete forward up to character {char} [exclusive]	
df{char}		delete forward through character {char} [inclusive]
dTX{char}		delete backward up to character {char} [exclusive]	
dFX{char}		delete forward through character {char} [inclusive]

# Editing

u               undo
yy              yank (copy) a line
y{motion}       yank text that {motion} moves over
p               paste after cursor
P               paste before cursor
<Del> or x      delete a character
dd              delete a line
d{motion}       delete text that {motion} moves over


# Reindenting
ggVG=

# Search and replace with the `:substitute` (aka `:s`) command

:s/foo/bar/	replace the first match of 'foo' with 'bar' on the current line only
:s/foo/bar/g	replace all matches (`g` flag) of 'foo' with 'bar' on the current line only
:%s/foo/bar/g	replace all matches of 'foo' with 'bar' in the entire file (`:%s`)
:%s/foo/bar/gc	ask to manually confirm (`c` flag) each replacement 
/\cfoo 			find foo case-insensitive (permanet solution is to add `:set ignorecase` in `.vimirc`)

# Preceding a motion or edition with a number repeats it 'n' times
# Examples:
50k         moves 50 lines up
2dw         deletes 2 words
5yy         copies 5 lines

# Find

f{char}			To [count]'th occurrence of {char} to the right.  The cursor is placed on {char} inclusive.

;			Repeat latest f, t, F or T [count] times. 

#Buffer

Ctrl-W = Make all buffer windows equal to each other (length and width)

:bunload close the buffer

# To edit the previous buffer in the buffer list
:bp
:bNext
:bprevious

# To set where windows are split 
set splitright
set splittop

        Swap the curent window with the next one
Ctlr-W Shift-H  Move this with to the far left 
Ctlr-W Shift-K  Move this with to the far right 

:bunload close the buffer

# Buffer

# refresh buffer 
redraw!
redr!


# To edit the previous buffer in the buffer list
:bp
:bNext
:bprevious

# To set where windows are split 
set splitright
set splittop


# Targets.vim

# To change the text in the next pair of parentheses, use the `cin)` command
cin)
# To delete the item in a comma separated list under the cursor, use `da,`
da,

# To change first argument but keep comma in function
cia

# To change second argument but keep comma in function
c2ina



# Abolish
# To change to snake_case
crs
#To change to mixed case (lower)
crm
#To change to camelCase
crc
#To change to UPPER_CASE 
cru
#To change to dash-case 
cr-
#To change to dot.case 
cr.
#TO change to space case 
cr<space>
#TO change to TItle Case
crt 

# Vimscript   
## Regexp matches
# \v enables “extended” regex mode which allows word boundary (<>), +, and more.
'hello' =~ 'xx*'
'hello' !~ 'xx*'
'hello' =~ '\v<\d+>'
