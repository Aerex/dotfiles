# Autogenerated config.py
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Uncomment this to still load settings configured via autoconfig.yml
config.load_autoconfig(False)

# Aliases for commands. The keys of the given dictionary are the
# aliases, while the values are the commands they map to.
# Type: Dict
c.aliases = {
    'run-cmd': 'spawn -u main.sh',
    'clear-cache': 'spawn -u clear-cache.sh',
    'json': 'spawn -u format_json',
    'tg': 'tab-give'
}

# How to open links in an existing instance if a new one is launched.
# This happens when e.g. opening a link from a terminal. See
# `new_instance_open_target_window` to customize in which window the
# link is opened in.
# Type: String
# Valid values:
#   - tab: Open a new tab in the existing window and activate the window.
#   - tab-bg: Open a new background tab in the existing window and activate the window.
#   - tab-silent: Open a new tab in the existing window without activating the window.
#   - tab-bg-silent: Open a new background tab in the existing window without activating the window.
#   - window: Open in a new window.
c.new_instance_open_target = 'window'

# Which window to choose when opening links as new tabs. When
# `new_instance_open_target` is not set to `window`, this is ignored.
# Type: String
# Valid values:
#   - first-opened: Open new tabs in the first (oldest) opened window.
#   - last-opened: Open new tabs in the last (newest) opened window.
#   - last-focused: Open new tabs in the most recently focused window.
#   - last-visible: Open new tabs in the most recently visible window.
c.new_instance_open_target_window = 'last-focused'

# Backend to use to display websites. qutebrowser supports two different
# web rendering engines / backends, QtWebKit and QtWebEngine. QtWebKit
# was discontinued by the Qt project with Qt 5.6, but picked up as a
# well maintained fork: https://github.com/annulen/webkit/wiki -
# qutebrowser only supports the fork. QtWebEngine is Qt's official
# successor to QtWebKit. It's slightly more resource hungry than
# QtWebKit and has a couple of missing features in qutebrowser, but is
# generally the preferred choice.
# Type: String
# Valid values:
#   - webengine: Use QtWebEngine (based on Chromium).
#   - webkit: Use QtWebKit (based on WebKit, similar to Safari).
c.backend = 'webengine'

# Which cookies to accept.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
c.content.cookies.accept = 'all'

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'file://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Allow pdf.js to view PDF files in the browser. Note that the files can
# still be downloaded by clicking the download button in the pdf.js
# viewer.
# Type: Bool
c.content.pdfjs = True

# Enable plugins in Web pages.
# Type: Bool
c.content.plugins = True

# Editor (and arguments) to use for the `open-editor` command. The
# following placeholders are defined: * `{file}`: Filename of the file
# to be edited. * `{line}`: Line in which the caret is found in the
# text. * `{column}`: Column in which the caret is found in the text. *
# `{line0}`: Same as `{line}`, but starting from index 0. * `{column0}`:
# Same as `{column}`, but starting from index 0.
# Type: ShellCommand
c.editor.command = ['termite', '-e', '/home/aerex/neovim/bin/nvim {}']

# Encoding to use for the editor.
# Type: Encoding
c.editor.encoding = 'utf-8'

# Handler for selecting file(s) in forms. If `external`, then the commands specified by
# `fileselect.single_file.command` and `fileselect.multiple_files.command` are used to
# select one or multiple files respectively.
# Type: String
# Valid values:
#   - external
#   - default
c.fileselect.handler = 'external'

# Command (and arguments) to use for selecting a single file in forms. The
# command should write the selected file path to the specified file or stdout.
# The following placeholders are defined: * `{}`: Filename of the file to be
# written to. If not contained in any argument, the standard output of the command is read instead.
# Type: ShellCommand
c.fileselect.single_file.command =  ['termite', '-t', 'qute-fileselect', '-e', 'vifm --choose-files={}']

# Command (and arguments) to use for selecting multiple files in forms. The command should write
# the selected file paths to the specified file or to stdout, separated by newlines. The following
# placeholders are defined: * `{}`: Filename of the file to be written to. If not contained in any
# argument, the standard output of the command is read instead.
# Type: ShellCommand
c.fileselect.multiple_files.command =  ['termite', '-t', 'qute-fileselect', '-e', 'vifm --choose-files={}']

# A comma-separated list of regexes to use for 'next' links.
# Type: List of Regex
c.hints.next_regexes = [
    "\\bnext\\b",
    "\\bmore\\b",
    "\\bnewer\\b",
    "\\b[>→≫]\\b",
    "\\b(>>|»)\\b",
    "\\bcontinue\\b",
]

# A comma-separated list of regexes to use for 'prev' links.
# Type: List of Regex
c.hints.prev_regexes = [
    "\\bprev(ious)?\\b",
    "\\bback\\b",
    "\\bolder\\b",
    "\\b[<←≪]\\b",
    "\\b(<<|«)\\b",
]
# CSS border value for hints.
# Type: String
c.hints.border = '1px solid #002b36'

# Automatically enter insert mode if an editable element is focused
# after loading the page.
# Type: Bool
c.input.insert_mode.auto_load = True

# Languages to use for spell checking. You can check for available
# languages and install dictionaries using scripts/dictcli.py. Run the
# script with -h/--help for instructions.
# Type: List of String
# Valid values:
#   - af-ZA: Afrikaans (South Africa)
#   - bg-BG: Bulgarian (Bulgaria)
#   - ca-ES: Catalan (Spain)
#   - cs-CZ: Czech (Czech Republic)
#   - da-DK: Danish (Denmark)
#   - de-DE: German (Germany)
#   - el-GR: Greek (Greece)
#   - en-AU: English (Australia)
#   - en-CA: English (Canada)
#   - en-GB: English (United Kingdom)
#   - en-US: English (United States)
#   - es-ES: Spanish (Spain)
#   - et-EE: Estonian (Estonia)
#   - fa-IR: Farsi (Iran)
#   - fo-FO: Faroese (Faroe Islands)
#   - fr-FR: French (France)
#   - he-IL: Hebrew (Israel)
#   - hi-IN: Hindi (India)
#   - hr-HR: Croatian (Croatia)
#   - hu-HU: Hungarian (Hungary)
#   - id-ID: Indonesian (Indonesia)
#   - it-IT: Italian (Italy)
#   - ko: Korean
#   - lt-LT: Lithuanian (Lithuania)
#   - lv-LV: Latvian (Latvia)
#   - nb-NO: Norwegian (Norway)
#   - nl-NL: Dutch (Netherlands)
#   - pl-PL: Polish (Poland)
#   - pt-BR: Portuguese (Brazil)
#   - pt-PT: Portuguese (Portugal)
#   - ro-RO: Romanian (Romania)
#   - ru-RU: Russian (Russia)
#   - sh: Serbo-Croatian
#   - sk-SK: Slovak (Slovakia)
#   - sl-SI: Slovenian (Slovenia)
#   - sq: Albanian
#   - sr: Serbian
#   - sv-SE: Swedish (Sweden)
#   - ta-IN: Tamil (India)
#   - tg-TG: Tajik (Tajikistan)
#   - tr-TR: Turkish (Turkey)
#   - uk-UA: Ukrainian (Ukraine)
#   - vi-VN: Vietnamese (Viet Nam)
c.spellcheck.languages = ['en-US']

# Page to open if :open -t/-b/-w is used without URL. Use `about:blank`
# for a blank page.
# Type: FuzzyUrl
c.url.default_page = 'https://dash.aerex.me'

# Search engines which can be used via the address bar. Maps a search
# engine name (such as `DEFAULT`, or `ddg`) to a URL with a `{}`
# placeholder. The placeholder will be replaced by the search term, use
# `{{` and `}}` for literal `{`/`}` signs. The search engine named
# `DEFAULT` is used when `url.auto_search` is turned on and something
# else than a URL was entered to be opened. Other search engines can be
# used by prepending the search engine name to the search term, e.g.
# `:open google qutebrowser`.
# Type: Dict
c.url.searchengines = {
    'DEFAULT': 'https://searx.aerex.me?q={}',
    'g': 'https://google.com/search?safe=off&q={}',
    'duck': 'https://duckduckgo.com?q={}',
    'yt': 'https://www.youtube.com/results?search_query={}',
    'r': 'https://reddit.com/r/{}',
    'arfg': 'https://github.ibm.com/arf?utf8=%E2%9C%93&q={}',
    'amz': 'https://www.amazon.com/s?field-keywords={}',
    'so': 'http://stackoverflow.com/search?q={}',
    'imdb': 'http://www.imdb.com/find?q={}&s=all',
    'arch': 'http://wiki.archlinux.org/index.php?title=Special%3ASearch&search={}&go=Go',
    'aur': 'https://aur.archlinux.org/packages.php?O=0&K={}&do_Search=Go',
    'man': 'https://www.die.net/search/?q={}',
    'viwiki': 'http://vim.wikia.com/wiki/Special:Search?query={}',
    'git': 'https://github.com/search?q={}',
    'jisho': 'https://jisho.org/search/{}',
    'pypi': 'https://pypi.org/search/?q={}',
    'inv': 'https://invidio.us/search?q={}'
}

# Page(s) to open at the start.
# Type: List of FuzzyUrl, or FuzzyUrl
c.url.start_pages = 'https://dash.aerex.me'

# Text color of the completion widget. May be a single color to use for
# all columns or a list of three colors, one for each column.
# Type: List of QtColor, or QtColor
c.colors.completion.fg = '#fdf6e3'

# Background color of the completion widget for odd rows.
# Type: QssColor
c.colors.completion.odd.bg = '#073642'

# Background color of the completion widget for even rows.
# Type: QssColor
c.colors.completion.even.bg = '#073642'

# Foreground color of completion widget category headers.
# Type: QtColor
c.colors.completion.category.fg = '#fdf6e3'

# Background color of the completion widget category headers.
# Type: QssColor
c.colors.completion.category.bg = '#002b36'

# Top border color of the completion widget category headers.
# Type: QssColor
c.colors.completion.category.border.top = '#002b36'

# Bottom border color of the completion widget category headers.
# Type: QssColor
c.colors.completion.category.border.bottom = '#002b36'

# Foreground color of the selected completion item.
# Type: QtColor
c.colors.completion.item.selected.fg = '#fdf6e3'

# Background color of the selected completion item.
# Type: QssColor
c.colors.completion.item.selected.bg = '#6c71c4'

# Top border color of the completion widget category headers.
# Type: QssColor
c.colors.completion.item.selected.border.top = '#6c71c4'

# Bottom border color of the selected completion item.
# Type: QssColor
c.colors.completion.item.selected.border.bottom = '#6c71c4'

# Foreground color of the matched text in the completion.
# Type: QtColor
c.colors.completion.match.fg = '#eee8d5'

# Color of the scrollbar handle in the completion view.
# Type: QssColor
c.colors.completion.scrollbar.fg = '#eee8d5'

# Color of the scrollbar in the completion view.
# Type: QssColor
c.colors.completion.scrollbar.bg = '#839496'

# Background color for the download bar.
# Type: QssColor
c.colors.downloads.bar.bg = '#002b36'

# Color gradient start for download text.
# Type: QtColor
c.colors.downloads.start.fg = '#fdf6e3'

# Foreground color for downloads with errors.
# Type: QtColor
c.colors.downloads.error.fg = '#fdf6e3'

# Background color for downloads with errors.
# Type: QtColor
c.colors.downloads.error.bg = '#dc322f'

# Font color for hints.
# Type: QssColor
c.colors.hints.fg = '#fdf6e3'

# Background color for hints. Note that you can use a `rgba(...)` value
# for transparency.
# Type: QssColor
c.colors.hints.bg = '#6c71c4'

# Font color for the matched part of hints.
# Type: QssColor
c.colors.hints.match.fg = '#eee8d5'

# Text color for the keyhint widget.
# Type: QssColor
c.colors.keyhint.fg = '#fdf6e3'

# Highlight color for keys to complete the current keychain.
# Type: QssColor
c.colors.keyhint.suffix.fg = '#b58900'

# Foreground color of an error message.
# Type: QssColor
c.colors.messages.error.fg = '#fdf6e3'

# Background color of an error message.
# Type: QssColor
c.colors.messages.error.bg = '#dc322f'

# Border color of an error message.
# Type: QssColor
c.colors.messages.error.border = '#dc322f'

# Foreground color of a warning message.
# Type: QssColor
c.colors.messages.warning.fg = '#fdf6e3'

# Background color of a warning message.
# Type: QssColor
c.colors.messages.warning.bg = '#cb4b16'

# Border color of a warning message.
# Type: QssColor
c.colors.messages.warning.border = '#cb4b16'

# Foreground color of an info message.
# Type: QssColor
c.colors.messages.info.fg = '#fdf6e3'

# Background color of an info message.
# Type: QssColor
c.colors.messages.info.bg = '#002b36'

# Border color of an info message.
# Type: QssColor
c.colors.messages.info.border = '#002b36'

# Foreground color for prompts.
# Type: QssColor
c.colors.prompts.fg = '#fdf6e3'

# Border used around UI elements in prompts.
# Type: String
c.colors.prompts.border = '1px solid #fdf6e3'

# Background color for prompts.
# Type: QssColor
c.colors.prompts.bg = '#073642'

# Background color for the selected item in filename prompts.
# Type: QssColor
c.colors.prompts.selected.bg = '#586e75'

# Foreground color of the statusbar.
# Type: QssColor
c.colors.statusbar.normal.fg = '#fdf6e3'

# Background color of the statusbar.
# Type: QssColor
c.colors.statusbar.normal.bg = '#002b36'

# Foreground color of the statusbar in insert mode.
# Type: QssColor
c.colors.statusbar.insert.fg = '#fdf6e3'

# Background color of the statusbar in insert mode.
# Type: QssColor
c.colors.statusbar.insert.bg = '#859900'

# Foreground color of the statusbar in passthrough mode.
# Type: QssColor
c.colors.statusbar.passthrough.fg = '#fdf6e3'

# Background color of the statusbar in passthrough mode.
# Type: QssColor
c.colors.statusbar.passthrough.bg = '#d33682'

# Foreground color of the statusbar in private browsing mode.
# Type: QssColor
c.colors.statusbar.private.fg = '#fdf6e3'

# Background color of the statusbar in private browsing mode.
# Type: QssColor
c.colors.statusbar.private.bg = '#586e75'

# Foreground color of the statusbar in command mode.
# Type: QssColor
c.colors.statusbar.command.fg = '#fdf6e3'

# Background color of the statusbar in command mode.
# Type: QssColor
c.colors.statusbar.command.bg = '#002b36'

# Foreground color of the statusbar in private browsing + command mode.
# Type: QssColor
c.colors.statusbar.command.private.fg = '#fdf6e3'

# Background color of the statusbar in private browsing + command mode.
# Type: QssColor
c.colors.statusbar.command.private.bg = '#586e75'

# Foreground color of the statusbar in caret mode.
# Type: QssColor
c.colors.statusbar.caret.fg = '#fdf6e3'

# Background color of the statusbar in caret mode.
# Type: QssColor
c.colors.statusbar.caret.bg = '#268bd2'

# Foreground color of the statusbar in caret mode with a selection.
# Type: QssColor
c.colors.statusbar.caret.selection.fg = '#fdf6e3'

# Background color of the statusbar in caret mode with a selection.
# Type: QssColor
c.colors.statusbar.caret.selection.bg = '#6c71c4'

# Background color of the progress bar.
# Type: QssColor
c.colors.statusbar.progress.bg = '#fdf6e3'

# Default foreground color of the URL in the statusbar.
# Type: QssColor
c.colors.statusbar.url.fg = '#fdf6e3'

# Foreground color of the URL in the statusbar on error.
# Type: QssColor
c.colors.statusbar.url.error.fg = '#dc322f'

# Foreground color of the URL in the statusbar for hovered links.
# Type: QssColor
c.colors.statusbar.url.hover.fg = '#eee8d5'

# Foreground color of the URL in the statusbar on successful load
# (http).
# Type: QssColor
c.colors.statusbar.url.success.http.fg = '#fdf6e3'

# Foreground color of the URL in the statusbar on successful load
# (https).
# Type: QssColor
c.colors.statusbar.url.success.https.fg = '#fdf6e3'

# Foreground color of the URL in the statusbar when there's a warning.
# Type: QssColor
c.colors.statusbar.url.warn.fg = '#b58900'

# Color gradient start for the tab indicator.
# Type: QtColor
c.colors.tabs.indicator.start = '#6c71c4'

# Color gradient end for the tab indicator.
# Type: QtColor
c.colors.tabs.indicator.stop = '#cb4b16'

# Color for the tab indicator on errors.
# Type: QtColor
c.colors.tabs.indicator.error = '#dc322f'

# Foreground color of unselected odd tabs.
# Type: QtColor
c.colors.tabs.odd.fg = '#eee8d5'

# Background color of unselected odd tabs.
# Type: QtColor
c.colors.tabs.odd.bg = '#586e75'

# Foreground color of unselected even tabs.
# Type: QtColor
c.colors.tabs.even.fg = '#eee8d5'

# Background color of unselected even tabs.
# Type: QtColor
c.colors.tabs.even.bg = '#586e75'

# Foreground color of selected odd tabs.
# Type: QtColor
c.colors.tabs.selected.odd.fg = '#fdf6e3'

# Background color of selected odd tabs.
# Type: QtColor
c.colors.tabs.selected.odd.bg = '#002b36'

# Foreground color of selected even tabs.
# Type: QtColor
c.colors.tabs.selected.even.fg = '#fdf6e3'

# Background color of selected even tabs.
# Type: QtColor
c.colors.tabs.selected.even.bg = '#002b36'

# Default monospace fonts. Whenever "monospace" is used in a font
# setting, it's replaced with the fonts listed here.
# Type: Font
#c.fonts.monospace = 'Noto Sans'

# Font used in the completion widget.
# Type: Font
c.fonts.completion.entry = '12pt Noto Sans'

# Font used in the completion categories.
# Type: Font
c.fonts.completion.category = 'bold 12pt Noto Sans'

# Font used for the debugging console.
# Type: QtFont
c.fonts.debug_console = '12pt Noto Sans'

# Font used for the downloadbar.
# Type: Font
c.fonts.downloads = '12pt Noto Sans'

# Font used for the hints.
# Type: Font
c.fonts.hints = 'bold 16pt Noto Sans'

# Font used in the keyhint widget.
# Type: Font
c.fonts.keyhint = '12pt Noto Sans'

# Font used for error messages.
# Type: Font
c.fonts.messages.error = '12pt Noto Sans'

# Font used for info messages.
# Type: Font
c.fonts.messages.info = '12pt Noto Sans'

# Font used for warning messages.
# Type: Font
c.fonts.messages.warning = '12pt Noto Sans'

# Font used for prompts.
# Type: Font
c.fonts.prompts = '12pt sans-serif'

# Font used in the statusbar.
# Type: Font
c.fonts.statusbar = '12pt Noto Sans'

# Font used in the tab bar.
# Type: QtFont
#c.fonts.tabs = '12pt Noto Sans'
c.fonts.tabs.selected = 'bold 12pt Noto Sans'
c.fonts.tabs.unselected = '12pt Noto Sans'

# Font family for standard fonts.
# Type: FontFamily
c.fonts.web.family.standard = 'Noto Sans'

# Font family for fixed fonts.
# Type: FontFamily
c.fonts.web.family.fixed = 'Noto Sans'

# Font family for serif fonts.
# Type: FontFamily
c.fonts.web.family.serif = 'Noto Serif'

# Font family for sans-serif fonts.
# Type: FontFamily
c.fonts.web.family.sans_serif = 'Noto Sans'

config.bind('J', 'tab-prev')
config.bind('K', 'tab-next')

# Binding for hints
config.bind(';ki', 'hint links spawn kodi-cli -y "{hint-url}"')
config.bind(';kq', 'hint --rapid links spawn kodi-cli -q "{hint-url}"')

# Binding for caret mode
config.bind(';l','spawn --userscript goto-highlighted-link.sh', mode='caret')

# Bindings for normal mode
config.bind(';yp', 'spawn --userscript yank-url-path')
config.bind(';w', 'hint links spawn --userscript wall')
#config.bind(';m', 'spawn --userscript umpv {url}')
config.bind(';m', 'hint links spawn --userscript umpv {hint-url}')
config.bind(';M', 'hint --rapid links spawn --userscript umpv {hint-url}')
config.bind('<Ctrl+w>', 'close')
config.bind('<Space>ce', 'config-edit')
config.bind('<Ctrl+e>', 'edit-text')
config.bind('<Ctrl+H>', 'home')
config.bind('<Space>tg', 'tab-give')
config.bind('<Space>tG', 'set-cmd-text -s :tab-give')
config.bind('<Space>gt', 'tab-give')
config.bind('<Space>gT', 'set-cmd-text -s :tab-give')
config.bind('<Space>tp', 'tab-pin')
config.bind('<Space>jj', 'spawn --userscript format_json')
config.bind('<Space>m', 'set-cmd-text -s :set-mark')
config.bind('<Space>b', 'set-cmd-text -s :tab-select')
config.bind('<Meta+t>', 'open -t')
config.bind('<Space>cc', 'spawn -u clear-cache.sh')
config.bind('<Space><Enter>', 'set-cmd-text -s :')
config.bind('H', 'back')
config.bind('L', 'forward')
config.bind('O', 'set-cmd-text -s :open -t')
config.bind('wo', 'open -w')
config.bind('zl', 'spawn --userscript qute-pass')
config.bind('zol', 'spawn --userscript qute-pass --otp-only')
config.bind('zpl', 'spawn --userscript qute-pass --password-only')
config.bind('zul', 'spawn --userscript qute-pass --username-only')

# Bindings for command mod
config.bind('<Ctrl+j>', 'completion-item-focus next', mode='command')
config.bind('<Ctrl+k>', 'completion-item-focus prev', mode='command')
config.bind('<Ctrl+Shift+h>', 'rl-unix-filename-rubout', mode='command')
config.bind('<Ctrl+Tab>', 'completion-item-focus next', mode='command')
config.bind('<Escape>', 'mode-leave', mode='command')


#config.bind('<meta-d>', 'completion-item-del', mode='command')



